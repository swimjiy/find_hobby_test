{"version":3,"sources":["images/img-main.png","images/icon-link.svg","images/icon-facebook.svg","images/icon-kakaotalk.svg","images/icon-twitter.svg","components/Button.tsx","routes/Home.tsx","components/Graph.tsx","components/Question.tsx","components/Loading.tsx","routes/QuestionPage.tsx","components/Result.tsx","routes/ResultPage.tsx","App.tsx","serviceWorker.ts","styles/GlobalStyle.tsx","index.tsx"],"names":["module","exports","Button","color","children","props","StyledButton","styled","button","Home","HomeWrap","Title","SubTitle","Image","src","ImgMain","alt","to","div","h2","p","Graph","step","steps","Math","floor","StyledGraph","GraphInner","width","Question","getType","useState","questionList","setQuesList","question","setQuestion","setStep","type","setType","Array","fill","calType","setCalType","calculateType","max","apply","answer","index","indexOf","push","length","useEffect","data","QuestionData","questionData","QuesWrap","Content","TextWrap","Step","className","id","ButtonWrap","map","item","onClick","num","newArr","clickChoice","answerText","Loading","LoadingWrap","Spinner","Text","rotate","keyframes","span","QuestionPage","isLoading","setIsLoading","setTimeout","Result","resultList","setResultList","fetchResults","useCallback","QuestionResult","questionResult","url","window","location","href","TextWarp","subTitle","Name","title","Description","description","Section","TitleDepth2","ListWrap","recommand","List","ButtonShare","IconKakao","IconFacebook","IconTwitter","text","onCopy","alert","IconLink","h3","ul","li","h4","ResultPage","match","Number","params","App","render","Body","TransitionGroup","component","CSSTransition","timeout","classNames","key","exact","path","Boolean","hostname","GlobalStyle","createGlobalStyle","reset","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bed405a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img-main.21ada753.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-link.e8360725.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-facebook.a783ae89.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-kakaotalk.d91f52d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-twitter.e3663353.svg\";","import * as React from 'react';\nimport styled from 'styled-components';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tcolor?: string;\n}\n\nconst Button: React.SFC<ButtonProps> = ({ color, children, ...props }) => {\n\treturn (\n\t\t<StyledButton color={color} {...props}>{children}</StyledButton>\n\t)\n}\n\nexport default Button;\n\nconst StyledButton = styled.button`\n\twidth: 100%;\n\tmargin: 0 auto;\n\tmargin-top: 2em;\n\tpadding: 1em;\n\ttext-align: center;\n\tfont-size: 1.125em;\n\tfont-weight: 700;\n\tcolor: #000;\n\tborder: none;\n\tborder-radius: 1em;\n\tbackground-color: ${props => (props.color ? '#67FC96' : '#C9D6FF')};\n\t@media only screen and (max-width: 480px) {\n\t\tfont-size: 1\n\t}\n`\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '../components/Button';\nimport styled from 'styled-components';\nimport ImgMain from '../images/img-main.png'\n\nconst Home = () => {\n\treturn (\n\t\t<HomeWrap>\n\t\t\t<Title>나에게 어울리는<br/>집콕 취미생활 찾기</Title>\n\t\t\t<SubTitle>내 취미 유형과 집에서 200% 즐기는 방법을 알아보자</SubTitle>\n\t\t\t<Image><img src={ImgMain} alt=\"\"/></Image>\n\t\t\t<Link to=\"/question\">\n\t\t\t\t<Button color={\"green\"}>테스트 시작하기</Button>\n\t\t\t</Link>\n\t\t</HomeWrap>\n\t)\n}\n\nexport default  Home;\n\nconst HomeWrap = styled.div `\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center; \n\tmin-height: 100vh;\n\tpadding: 0 5%;\n\tbackground-color: #3F39E0;\n`\nconst Title = styled.h2 `\n\tmargin-bottom: 0.5em;\n\tfont-size: 1.5em;\n\tfont-weight: 700;\n\tline-height: 1.5em;\n\tcolor: #fff;\n`\nconst SubTitle = styled.p `\n\tmargin-bottom: 3em;\n\tfont-size: 0.875em;\n\tcolor: #fff;\n`\nconst Image = styled.div `\n\twidth: 100%;\n\tmax-width: 25em;\n\tmargin: 0 auto;\n\tbackground-color: #fff;\n\tborder-radius: 10%;\n\timg {\n\t\twidth: 100%;\n\t}\n`\n","import * as React from 'react';\nimport styled from 'styled-components';\n\ninterface GraphProps {\n\tstep: number;\n}\n\ninterface IGraphInner {\n\twidth: number;\n}\n\nconst Graph: React.SFC<GraphProps> = ({ step }) => {\n\tlet steps = Math.floor(step / 15 * 100);\n\treturn (\n\t\t<StyledGraph><GraphInner width={steps}></GraphInner></StyledGraph>\n\t)\n}\n\nexport default Graph;\n\nconst StyledGraph = styled.div `\n\twidth: 90%;\n\theight: 0.983em;\n\tmargin: 0 auto 5em;\n\tborder-radius: 2em;\n\tbackground-color: #F8F8F8;\n`\nconst GraphInner = styled.div `\n\twidth: ${(props:IGraphInner) => props.width}%;\n\theight: 100%;\n\tmargin-bottom: 1em;\n\tborder-radius: 2em;\n\tbackground-color: #3F39E0;\n\ttransition: all 0.5s ease-in;\n`\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport Button from '../components/Button'\nimport styled from 'styled-components'\nimport Graph from '../components/Graph'\nimport QuestionData from '../data/QuestionData.json'\n\ninterface QuestionProps {\n\tgetType(type: number): void;\n}\n\ninterface IQuestionList {\n\tid: number;\n\ttype: Array<number>;\n\tquestion: string;\n\tanswer: Array<Array<number | string>>;\n}\n\nconst Question: React.FC<QuestionProps> = ({ getType }) => {\n\tconst [questionList, setQuesList] = useState<IQuestionList[]>([]);\n\tconst [question, setQuestion] = useState<Partial<IQuestionList>>({});\n\tconst [step, setStep] = useState<number>(1);\n\tconst [type, setType] = useState<number>(0);\n\tconst [calType, setCalType] = useState<Array<number>>(new Array(6).fill(0));\n\t\n\tconst fetchQuestions = (data: any):any => {\n\t\tsetQuesList(data.questionData);\n\t\tsetQuestion(data.questionData[0]);\n\t}\n\tconst clickChoice = (num: number): void => {\n\t\tsetStep(step + 1);\n\t\tsetQuestion(questionList[step]);\n\t\tif (num === 1) {\n\t\t\tlet newArr = [...calType];\n\t\t\tquestion.type && \n\t\t\t\tquestion.type.map((item: any) => {\n\t\t\t\t\treturn (newArr[item - 1] += 1);\n\t\t\t\t})\n\t\t\tsetCalType(newArr);\n\t\t}\n\t\tif (step === 15)\n\t\t\tcalculateType();\n\t}\n\tconst calculateType = (): void => {\n\t\tconst max = Math.max.apply(null, calType);\n\t\tlet answer = [];\n\t\tlet index = -1;\n\t\tdo {\n\t\t\tindex = calType.indexOf(max, index + 1);\n\t\t\tif (index >= 0)\n\t\t\t\tanswer.push(index + 1);\n\t\t} while (index !== -1);\n\t\tif (answer.length > 1) {\n\t\t\tsetType(answer[answer.length - 1]);\n\t\t} else {\n\t\t\tsetType(answer[0]);\n\t\t}\n\t}\n\tuseEffect(() => {\n\t\tif (step === 1) {\n\t\t\tfetchQuestions(QuestionData);\n\t\t} else if (step === 16) {\n\t\t\tgetType(type);\n\t\t}\n\t}, [step, getType, type])\n\treturn (\n\t\t<QuesWrap>\n\t\t\t{question && \n\t\t\t<Content>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Step><strong className=\"txt-bold\">{step}</strong> / 15</Step>\n\t\t\t\t\t<Graph step={step}/>\n\t\t\t\t\t<Title><span className=\"txt-light\">Q{question.id}.</span><strong>{question.question}</strong></Title>\n\t\t\t\t</TextWrap>\n\t\t\t\t<ButtonWrap>\n\t\t\t\t\t{question.answer && \n\t\t\t\t\t\tquestion.answer.map((item: any) => {\n\t\t\t\t\t\t\treturn (<Button onClick={() => clickChoice(item.id)}>{item.answerText}</Button>)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ButtonWrap>\n\t\t\t</Content>\n\t\t\t}\n\t\t</QuesWrap>\n\t);\n}\n\nexport default Question;\n\nconst QuesWrap = styled.div `\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center; \n\tmin-height: 100vh;\n\tbackground-color: #fff;\n`\nconst Step = styled.p `\n\tmargin-top:2em;\n\tmargin-bottom: 3em;\n\tfont-size: 1.125em;\n\tfont-weight: 400;\n\tcolor: #000;\n\t.txt-bold {\n\t\tfont-weight: 700;\n\t}\n`\nconst Title = styled.div `\n\twidth: 90%;\n\tmargin: 0 auto;\n\tmargin-bottom: 0.5em;\n\tfont-size: 1.5em;\n\tfont-weight: 700;\n\tline-height: 1.5em;\n\tcolor: #000;\n\t.txt-light {\n\t\tfont-weight: 400;\n\t}\n`\nconst Content = styled.div `\n\tflex: 1;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n`\nconst TextWrap = styled.div `\n\tflex: 1;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: flex-start;\n\tpadding: 0 5%;\n`\nconst ButtonWrap = styled.div `\n\tpadding: 1em 5% 4em;\n\tborder-top-left-radius: 35px;\n\tborder-top-right-radius: 35px;\n\tbackground-color: #F8F8F8;\n`\n","import * as React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst Loading = () => {\n\treturn (\n\t\t<LoadingWrap>\n\t\t\t<Spinner/>\n\t\t\t<Text>결과 분석중...</Text>\n\t\t</LoadingWrap>\n\t)\n}\n\nexport default Loading;\n\nconst LoadingWrap = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\twidth: 100%;\n\theight: 100vh;\n\tbackground-color: #3F39E0;\n`\nconst rotate = keyframes`\n\t0% {\n\t\ttransform: scale(0);\n\t}\n\t100% {\n\t\ttransform: scale(1);\n\t\topacity: 0;\n\t}\n`\nconst Spinner = styled.div`\n\twidth: 3em;\n\theight: 3em;\n\tborder-radius: 100%;\n\tbackground-color: #fff;\n\tanimation: ${rotate} 1s infinite ease-in-out;\n`\nconst Text = styled.span`\n\tmargin-top: 2em;\n\tfont-size: 1.125em;\n\tfont-weight: 700;\n\tcolor: #fff;\n`\n\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport Question from '../components/Question';\nimport Loading from '../components/Loading'\n\nconst QuestionPage = () => {\n\tconst [type, setType] = useState<number>(0);\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\tconst getType = (type: number):void => {\n\t\tsetType(type);\n\t\tsetTimeout(() => setIsLoading(true), 2000);\n\t}\n\treturn (\n\t\t<section>\n\t\t\t{\n\t\t\t\t(type === 0) ? (\n\t\t\t\t\t<Question getType={(type) => getType(type)}/>\n\t\t\t\t) : (\n\t\t\t\t\t\t(!isLoading) ? (\n\t\t\t\t\t\t\t<Loading/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Redirect to={`/result/${ type }`} />\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t</section>\n\t)\n}\n\nexport default  QuestionPage;\n","import * as React from 'react';\nimport { useState, useEffect, useCallback, useRef } from 'react'\nimport { Link } from 'react-router-dom';\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport QuestionResult from '../data/QuestionResult.json'\nimport Button from '../components/Button'\nimport styled from 'styled-components';\nimport IconLink from '../images/icon-link.svg';\nimport IconFacebook from '../images/icon-facebook.svg';\nimport IconKakao from '../images/icon-kakaotalk.svg';\nimport IconTwitter from '../images/icon-twitter.svg';\nimport ImgMain from '../images/img-main.png'\n\ninterface ResultProps {\n\ttype: number;\n}\n\ninterface IresultList {\n\tid: number;\n\tsubTitle: string;\n\ttitle: string;\n\tdescription: string;\n\trecommand: Array<Array<number | string>>;\n}\n\nconst Result: React.FC<ResultProps> = ({ type }) => {\n\tconst [resultList, setResultList] = useState<Partial<IresultList>>({});\n\t\n\tconst fetchResults = useCallback((QuestionResult, type) => {\n\t\tsetResultList(QuestionResult.questionResult[type - 1]);\n\t}, []);\n\n\tconst url = window.location.href;\n\tconst alertCopied = () => {\n\t\talert('URL이 복사되었습니다!');\n\t}\n\n\tuseEffect(() => {\n\t\tif (type >= 0) \n\t\t\tfetchResults(QuestionResult, type);\n\t}, [type, fetchResults])\n\n\treturn (\n\t\t<section>\n\t\t\t{resultList &&\n\t\t\t\t<section>\n\t\t\t\t\t<TextWarp>\n\t\t\t\t\t\t<Title>나의 집콕 유형은</Title>\n\t\t\t\t\t\t<Image><img src={ImgMain} alt=\"\"/></Image>\n\t\t\t\t\t\t<SubTitle>{resultList.subTitle}</SubTitle>\n\t\t\t\t\t\t<Name>{resultList.title}</Name>\n\t\t\t\t\t\t<Description>{resultList.description}</Description>\n\t\t\t\t\t</TextWarp>\n\t\t\t\t\t<Section>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<TitleDepth2>집콕으로 200% 즐기기</TitleDepth2>\n\t\t\t\t\t\t\t<ListWrap>\n\t\t\t\t\t\t\t{resultList.recommand && \n\t\t\t\t\t\t\t\tresultList.recommand.map((item: any) => {\n\t\t\t\t\t\t\t\t\treturn (<List>{item.description}</List>)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ListWrap>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<TitleDepth2>테스트 공유하기</TitleDepth2>\n\t\t\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t\t\t<ButtonShare className=\"icon-kakao\"><img src={IconKakao} alt=\"카카오톡 공유\"/></ButtonShare>\n\t\t\t\t\t\t\t\t<ButtonShare className=\"icon-facebook\"><img src={IconFacebook} alt=\"페이스북 공유\"/></ButtonShare>\n\t\t\t\t\t\t\t\t<ButtonShare className=\"icon-twitter\"><img src={IconTwitter} alt=\"트위터 공유\"/></ButtonShare>\n\t\t\t\t\t\t\t\t<CopyToClipboard text={url} onCopy={alertCopied}>\n\t\t\t\t\t\t\t\t\t<ButtonShare className=\"icon-link\"><img src={IconLink} alt=\"url 공유\"/></ButtonShare>\n\t\t\t\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t\t\t\t</ButtonWrap>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t<Button>테스트 다시하기</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Section>\n\t\t\t\t</section>\n\t\t\t}\n\t\t</section>\n\t)\n}\n\nexport default Result;\n \nconst TextWarp = styled.div `\n\tpadding: 2em 5%;\n`\n\nconst Title = styled.h2 `\n\tmargin-bottom: 0.5em;\n\tfont-size: 1.5em;\n\tfont-weight: 700;\n\tline-height: 1.5em;\n\tcolor: #000;\n`\nconst SubTitle = styled.p `\n\tmargin-bottom: 1em;\n\tfont-size: 0.875em;\n\tcolor: #000;\n\ttext-align: center;\n`\nconst Name = styled.h3 `\n\tmargin-bottom: 3em;\n\tpadding: 1em;\n\tfont-size: 1.125em;\n\tfont-weight: 700;\n\tcolor: #fff;\n\ttext-align: center;\n\tborder-radius: 1em;\n\tbackground-color: #3F39E0;\n`\nconst Description = styled.p `\n\tmargin-bottom: 3em;\n\tfont-size: 0.875em;\n\tline-height: 1.5em;\n\ttext-align: left;\n\tcolor: #000;\n`\nconst Image = styled.div `\n\twidth: 100%;\n\tmax-width: 25em;\n\tmargin: 0 auto;\n\timg {\n\t\twidth: 100%;\n\t}\n`\nconst Section = styled.div `\n\tpadding: 3em 7% 4em;\n\tborder-top-left-radius: 35px;\n\tborder-top-right-radius: 35px;\n\tbackground-color: #F8F8F8;\n`\nconst ListWrap = styled.ul `\n\tmargin-bottom: 4em;\n`\nconst List = styled.li `\n\tposition: relative;\n\tmargin-left: 1em;\n\tmargin-bottom: 1em;\n\ttext-align: left;\n\tline-height: 1.5em;\n\t&::before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tleft: -0.875em;\n\t\ttop: 0.5em;\n\t\twidth: 4px;\n\t\theight: 4px;\n\t\tborder-radius: 50%;\n\t\tbackground-color: #3F39E0;\n\t}\n`\nconst TitleDepth2 = styled.h4 `\n\tmargin-bottom: 1.5em;\n\tfont-size: 1.125em;\n\tfont-weight: 700;\n\ttext-align: left;\n`\nconst ButtonWrap = styled.div `\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\nconst ButtonShare = styled.button `\n\twidth: 4em;\n\theight: 4em;\n\tborder-radius: 1em;\n\tborder: none;\n\tbackground-color: #FFF29E;\n\t&.icon-kakao {\n\t\tbackground-color: #FFF29E;\n\t}\n\t&.icon-facebook {\n\t\tbackground-color: #C9E5FF;\n\t}\n\t&.icon-twitter {\n\t\tbackground-color: #C9F8FF;\n\t}\n\t&.icon-link {\n\t\tbackground-color: #F2F2F2;\n\t}\n`\n","import * as React from 'react';\nimport Result from '../components/Result';\nimport { RouteComponentProps } from 'react-router';\n\ninterface MatchParams {\n\tid?: string | undefined;\n}\n\ninterface ResultProps extends RouteComponentProps<MatchParams> {\n}\n\nconst ResultPage: React.FC<ResultProps> = ({match}) => {\n\tconst type:number = Number(match.params.id);\n\treturn (\n\t\t<Result type={type}/>\n\t)\n}\n\nexport default  ResultPage;\n","import * as React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Home from './routes/Home'\nimport QuestionPage from './routes/QuestionPage';\nimport ResultPage from './routes/ResultPage';\nimport styled from 'styled-components';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nfunction App() {\n  return (\n\t  <BrowserRouter>\n\t\t\t<Route render={({ location }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Body className=\"App\">\n\t\t\t\t\t\t<TransitionGroup component={null}>\n\t\t\t\t\t\t\t<CSSTransition\n\t\t\t\t\t\t\t\ttimeout={300}\n\t\t\t\t\t\t\t\tclassNames=\"page\"\n\t\t\t\t\t\t\t\tkey={location.key}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Switch location={location}>\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={Home}/>\n\t\t\t\t\t\t\t\t\t<Route path=\"/question\" component={QuestionPage}/>\n\t\t\t\t\t\t\t\t\t<Route path=\"/result/:id\" component={ResultPage}/>\n\t\t\t\t\t\t\t\t\t<Redirect path=\"*\" to=\"/\" />\n\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t</CSSTransition>\n\t\t\t\t\t\t</TransitionGroup>\n\t\t\t\t\t</Body>\n\t\t\t\t)\n\t\t\t}} />\n\t\t</BrowserRouter>\n  );\n}\n\nexport default App;\n\nconst Body = styled.div`\n\twidth: 100%;\n\t.page-enter {\n\t\topacity: 0.01;\n\t}\n\t.page-enter.page-enter-active {\n\t\topacity: 1;\n\t\ttransition: opacity 300ms ease-in;\n\t}\n\t.page-exit {\n\t\topacity: 1;\n\t}\n\t.page-exit.page-exit-active {\n\t\topacity: 0.01;\n\t\ttransition: opacity 300ms ease-in;\n\t}\n\t@media only screen and (min-width: 1200px) {\n\t\twidth: 100%;\n\t\tmax-width: 1200px;\n\t\tmargin: 0 auto;\n\t\tpadding: 0 2%;\n\t}\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nconst GlobalStyle = createGlobalStyle`\n\t${reset}\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\tbody {\n\t\tbackground-color: #fff;\n\t}\n\ta {\n\t\ttext-decoration: none;\n\t\tcolor: #000;\n\t\tcursor: pointer;\n\t}\n\tbutton {\n\t\tcursor: pointer;\n\t}\n`\n\nexport default GlobalStyle;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStyle from './styles/GlobalStyle'\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<GlobalStyle/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}